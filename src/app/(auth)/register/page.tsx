// src/app/(auth)/register/page.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";
import { UserRole } from "@/types";
import { toast } from "react-toastify";
import {
  CheckCircle,
  Clock,
  AlertCircle,
  Calendar,
  Users,
  UserCheck,
  User,
  Eye,
  EyeOff,
  Mail,
  Lock,
  Building,
  Phone,
  Globe,
  FileText,
  Award,
  UserPlus,
} from "lucide-react";

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    role: UserRole.PARTICIPANT,
    organization: "",
    position: "",
    phone: "",
    bio: "",
    orcid: "",
    website: "",
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isFirstUser, setIsFirstUser] = useState(false);
  const [registrationSuccess, setRegistrationSuccess] = useState(false);
  const [registeredRole, setRegisteredRole] = useState<UserRole | null>(null);

  const { register, error, clearError, loading } = useAuth();
  const router = useRouter();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ
  useEffect(() => {
    const checkFirstUser = async () => {
      try {
        const response = await fetch("/api/check-admins");
        const data = await response.json();
        setIsFirstUser(data.isFirstUser);

        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å SUPER_ADMIN
        if (data.isFirstUser) {
          setFormData((prev) => ({ ...prev, role: UserRole.SUPER_ADMIN }));
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", error);
      }
    };

    checkFirstUser();
  }, []);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (!formData.name.trim()) {
      newErrors.name = "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    } else if (formData.name.length < 2) {
      newErrors.name = "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞";
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (!formData.email.trim()) {
      newErrors.email = "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (!formData.password) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    } else if (formData.password.length < 8) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤";
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç";
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–µ-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (
      formData.role !== UserRole.PARTICIPANT &&
      !formData.organization.trim()
    ) {
      newErrors.organization = "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏";
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è ORCID –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (
      formData.orcid &&
      !/^\d{4}-\d{4}-\d{4}-\d{3}[\dX]$/.test(formData.orcid)
    ) {
      newErrors.orcid = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ORCID (0000-0000-0000-0000)";
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è website –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (formData.website && !/^https?:\/\/.+/.test(formData.website)) {
      newErrors.website =
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ–±-—Å–∞–π—Ç–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://)";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: "" }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrors({});
    clearError();

    if (!validateForm()) {
      toast.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã");
      return;
    }

    try {
      const registrationData = {
        name: formData.name,
        email: formData.email,
        password: formData.password,
        role: formData.role,
        organization: formData.organization || undefined,
        position: formData.position || undefined,
        phone: formData.phone || undefined,
        bio: formData.bio || undefined,
        orcid: formData.orcid || undefined,
        website: formData.website || undefined,
      };

      await register(
        registrationData.name,
        registrationData.email,
        registrationData.password,
        registrationData.role,
        registrationData.organization,
        registrationData.phone
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      setRegistrationSuccess(true);
      setRegisteredRole(formData.role);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (isFirstUser || formData.role === UserRole.SUPER_ADMIN) {
        toast.success("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.", {
          position: "top-center",
          autoClose: 5000,
        });

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          router.push("/login?registered=true&activated=true");
        }, 3000);
      } else {
        toast.info("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.", {
          position: "top-center",
          autoClose: 7000,
        });

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          router.push("/login?registered=true&activation=pending");
        }, 5000);
      }
    } catch (error) {
      const message =
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";

      if (
        message.includes("—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç") ||
        message.includes("already exists")
      ) {
        setErrors({ email: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${message}`);
      }
    }
  };

  // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (registrationSuccess) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center px-4">
        <div className="w-full max-w-md">
          <div className="bg-white rounded-2xl shadow-xl p-8 text-center border border-gray-100">
            {isFirstUser || registeredRole === UserRole.SUPER_ADMIN ? (
              // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
              <>
                <div className="flex justify-center mb-6">
                  <CheckCircle className="h-16 w-16 text-green-500" />
                </div>
                <h1 className="text-2xl font-bold text-gray-900 mb-4">
                  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
                </h1>
                <div className="space-y-4">
                  <p className="text-gray-600">
                    –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏
                    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
                  </p>
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="text-sm text-green-800 space-y-1">
                      <div>
                        <strong>–ò–º—è:</strong> {formData.name}
                      </div>
                      <div>
                        <strong>Email:</strong> {formData.email}
                      </div>
                      <div>
                        <strong>–†–æ–ª—å:</strong> –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                      </div>
                    </div>
                  </div>
                  <p className="text-sm text-gray-500">
                    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...
                  </p>
                </div>
              </>
            ) : (
              // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è)
              <>
                <div className="flex justify-center mb-6">
                  <Clock className="h-16 w-16 text-amber-500" />
                </div>
                <h1 className="text-2xl font-bold text-gray-900 mb-4">
                  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
                </h1>
                <div className="space-y-4">
                  <p className="text-gray-600">
                    –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.
                  </p>
                  <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertCircle className="h-4 w-4 text-amber-600" />
                      <span className="text-sm font-medium text-amber-800">
                        –ß—Ç–æ –¥–∞–ª—å—à–µ?
                      </span>
                    </div>
                    <ul className="text-sm text-amber-700 space-y-1 text-left">
                      <li>
                        ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                      </li>
                      <li>‚Ä¢ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ</li>
                      <li>‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</li>
                    </ul>
                  </div>
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <div className="text-sm text-gray-600 space-y-1">
                      <div>
                        <strong>–ò–º—è:</strong> {formData.name}
                      </div>
                      <div>
                        <strong>Email:</strong> {formData.email}
                      </div>
                      <div>
                        <strong>–†–æ–ª—å:</strong>{" "}
                        {getRoleDisplayName(registeredRole!)}
                      </div>
                      {formData.organization && (
                        <div>
                          <strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> {formData.organization}
                        </div>
                      )}
                    </div>
                  </div>
                  <p className="text-sm text-gray-500">
                    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...
                  </p>
                </div>
              </>
            )}

            <div className="pt-6">
              <Link
                href="/login"
                className="inline-flex items-center gap-2 px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫–æ –≤—Ö–æ–¥—É
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 py-12 px-4">
      <div className="max-w-2xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-indigo-600 rounded-full mb-4">
            <UserPlus className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
          </h1>
          <p className="text-gray-600">
            –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö
          </p>
        </div>

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        {isFirstUser && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <div className="flex items-center gap-2">
              <CheckCircle className="h-4 w-4 text-blue-600 flex-shrink-0" />
              <p className="text-sm text-blue-800">
                <strong>–í–∞–∂–Ω–æ:</strong> –í—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫
                —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã (–ø–µ—Ä–≤—ã–π
                –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã).
              </p>
            </div>
          </div>
        )}

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ */}
        {!isFirstUser && (
          <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mb-6">
            <div className="flex items-center gap-2">
              <AlertCircle className="h-4 w-4 text-amber-600 flex-shrink-0" />
              <p className="text-sm text-amber-800">
                <strong>–í–∞–∂–Ω–æ:</strong> –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω
                –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É.
              </p>
            </div>
          </div>
        )}

        {/* –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        <div className="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* –û–±—â–∞—è –æ—à–∏–±–∫–∞ */}
            {error && (
              <div className="p-4 text-red-700 bg-red-50 border border-red-200 rounded-lg">
                {error}
              </div>
            )}

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <User className="h-5 w-5 mr-2 text-indigo-600" />
                –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* –ü–æ–ª–Ω–æ–µ –∏–º—è */}
                <div className="md:col-span-2">
                  <label
                    htmlFor="name"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –ü–æ–ª–Ω–æ–µ –∏–º—è *
                  </label>
                  <input
                    id="name"
                    name="name"
                    type="text"
                    value={formData.name}
                    onChange={handleInputChange}
                    className={`block w-full px-3 py-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                      errors.name
                        ? "border-red-300 focus:border-red-500"
                        : "border-gray-300 focus:border-indigo-500"
                    }`}
                    placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                  />
                  {errors.name && (
                    <p className="mt-1 text-sm text-red-600">{errors.name}</p>
                  )}
                </div>

                {/* Email */}
                <div>
                  <label
                    htmlFor="email"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    Email –∞–¥—Ä–µ—Å *
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Mail className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      id="email"
                      name="email"
                      type="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      className={`block w-full pl-10 pr-3 py-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        errors.email
                          ? "border-red-300 focus:border-red-500"
                          : "border-gray-300 focus:border-indigo-500"
                      }`}
                      placeholder="participant@university.edu"
                    />
                  </div>
                  {errors.email && (
                    <p className="mt-1 text-sm text-red-600">{errors.email}</p>
                  )}
                </div>

                {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
                <div>
                  <label
                    htmlFor="phone"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Phone className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      id="phone"
                      name="phone"
                      type="tel"
                      value={formData.phone}
                      onChange={handleInputChange}
                      className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                      placeholder="+7 (999) 123-45-67"
                    />
                  </div>
                </div>

                {/* –ü–∞—Ä–æ–ª—å */}
                <div>
                  <label
                    htmlFor="password"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –ü–∞—Ä–æ–ª—å *
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Lock className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      id="password"
                      name="password"
                      type={showPassword ? "text" : "password"}
                      value={formData.password}
                      onChange={handleInputChange}
                      className={`block w-full pl-10 pr-10 py-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        errors.password
                          ? "border-red-300 focus:border-red-500"
                          : "border-gray-300 focus:border-indigo-500"
                      }`}
                      placeholder="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 pr-3 flex items-center"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      ) : (
                        <Eye className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      )}
                    </button>
                  </div>
                  {errors.password && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.password}
                    </p>
                  )}
                </div>

                {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
                <div>
                  <label
                    htmlFor="confirmPassword"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è *
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Lock className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      id="confirmPassword"
                      name="confirmPassword"
                      type={showConfirmPassword ? "text" : "password"}
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                      className={`block w-full pl-10 pr-10 py-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        errors.confirmPassword
                          ? "border-red-300 focus:border-red-500"
                          : "border-gray-300 focus:border-indigo-500"
                      }`}
                      placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 pr-3 flex items-center"
                      onClick={() =>
                        setShowConfirmPassword(!showConfirmPassword)
                      }
                    >
                      {showConfirmPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      ) : (
                        <Eye className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      )}
                    </button>
                  </div>
                  {errors.confirmPassword && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.confirmPassword}
                    </p>
                  )}
                </div>
              </div>
            </div>

            {/* –†–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ */}
            {!isFirstUser && (
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                  <UserCheck className="h-5 w-5 mr-2 text-indigo-600" />
                  –†–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
                </h3>

                <div>
                  <label
                    htmlFor="role"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å
                  </label>
                  <select
                    id="role"
                    name="role"
                    value={formData.role}
                    onChange={handleInputChange}
                    className="block w-full px-3 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  >
                    <option value={UserRole.PARTICIPANT}>
                      –£—á–∞—Å—Ç–Ω–∏–∫ (–ø–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏)
                    </option>
                    <option value={UserRole.ORGANIZER}>
                      –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏)
                    </option>
                    <option value={UserRole.REVIEWER}>
                      –†–µ—Ü–µ–Ω–∑–µ–Ω—Ç (–æ—Ü–µ–Ω–∫–∞ –∑–∞—è–≤–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
                    </option>
                  </select>
                  <div className="mt-2">
                    <RoleDescription role={formData.role} />
                  </div>
                </div>
              </div>
            )}

            {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <Building className="h-5 w-5 mr-2 text-indigo-600" />
                –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è */}
                <div>
                  <label
                    htmlFor="organization"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {formData.role !== UserRole.PARTICIPANT && "*"}
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Building className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      id="organization"
                      name="organization"
                      type="text"
                      value={formData.organization}
                      onChange={handleInputChange}
                      className={`block w-full pl-10 pr-3 py-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        errors.organization
                          ? "border-red-300 focus:border-red-500"
                          : "border-gray-300 focus:border-indigo-500"
                      }`}
                      placeholder="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –∏–Ω—Å—Ç–∏—Ç—É—Ç, –∫–æ–º–ø–∞–Ω–∏—è"
                    />
                  </div>
                  {errors.organization && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.organization}
                    </p>
                  )}
                </div>

                {/* –î–æ–ª–∂–Ω–æ—Å—Ç—å */}
                <div>
                  <label
                    htmlFor="position"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –î–æ–ª–∂–Ω–æ—Å—Ç—å
                  </label>
                  <input
                    id="position"
                    name="position"
                    type="text"
                    value={formData.position}
                    onChange={handleInputChange}
                    className="block w-full px-3 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, —Å—Ç—É–¥–µ–Ω—Ç"
                  />
                </div>

                {/* ORCID */}
                <div>
                  <label
                    htmlFor="orcid"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    ORCID ID
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Award className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      id="orcid"
                      name="orcid"
                      type="text"
                      value={formData.orcid}
                      onChange={handleInputChange}
                      className={`block w-full pl-10 pr-3 py-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        errors.orcid
                          ? "border-red-300 focus:border-red-500"
                          : "border-gray-300 focus:border-indigo-500"
                      }`}
                      placeholder="0000-0000-0000-0000"
                    />
                  </div>
                  {errors.orcid && (
                    <p className="mt-1 text-sm text-red-600">{errors.orcid}</p>
                  )}
                </div>

                {/* –í–µ–±-—Å–∞–π—Ç */}
                <div>
                  <label
                    htmlFor="website"
                    className="block text-sm font-medium text-gray-700 mb-2"
                  >
                    –í–µ–±-—Å–∞–π—Ç
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Globe className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      id="website"
                      name="website"
                      type="url"
                      value={formData.website}
                      onChange={handleInputChange}
                      className={`block w-full pl-10 pr-3 py-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                        errors.website
                          ? "border-red-300 focus:border-red-500"
                          : "border-gray-300 focus:border-indigo-500"
                      }`}
                      placeholder="https://example.com"
                    />
                  </div>
                  {errors.website && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.website}
                    </p>
                  )}
                </div>
              </div>

              {/* –ë–∏–æ–≥—Ä–∞—Ñ–∏—è */}
              <div className="mt-4">
                <label
                  htmlFor="bio"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  –ö—Ä–∞—Ç–∫–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è
                </label>
                <textarea
                  id="bio"
                  name="bio"
                  value={formData.bio}
                  onChange={handleInputChange}
                  rows={3}
                  className="block w-full px-3 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –æ–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö..."
                />
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
            <div className="pt-6">
              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center items-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors"
              >
                {loading ? (
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...
                  </div>
                ) : (
                  <div className="flex items-center">
                    <UserPlus className="h-4 w-4 mr-2" />
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                  </div>
                )}
              </button>
            </div>

            {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ */}
            <div className="text-center">
              <span className="text-sm text-gray-500">
                –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
                <Link
                  href="/login"
                  className="font-medium text-indigo-600 hover:text-indigo-500 transition-colors"
                >
                  –í–æ–π—Ç–∏
                </Link>
              </span>
            </div>
          </form>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
        <div className="mt-8 bg-white rounded-xl shadow-sm p-6 border border-gray-100">
          <h3 className="text-sm font-medium text-gray-700 mb-4 text-center">
            –û —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏
          </h3>
          <div className="text-xs text-gray-600 space-y-2">
            <p>
              ‚Ä¢ <strong>–£—á–∞—Å—Ç–Ω–∏–∫–∏</strong> –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤
              –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ –∏ –ø–æ–ª—É—á–∞—Ç—å
              —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
            </p>
            <p>
              ‚Ä¢ <strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã</strong> —Å–æ–∑–¥–∞—é—Ç –∏ —É–ø—Ä–∞–≤–ª—è—é—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏,
              –º–æ–¥–µ—Ä–∏—Ä—É—é—Ç –∑–∞—è–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            </p>
            <p>
              ‚Ä¢ <strong>–†–µ—Ü–µ–Ω–∑–µ–Ω—Ç—ã</strong> –æ—Ü–µ–Ω–∏–≤–∞—é—Ç –Ω–∞—É—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏
              –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
            </p>
            <p>
              ‚Ä¢ <strong>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</strong> —É–ø—Ä–∞–≤–ª—è—é—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π –∏
              –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏
function RoleDescription({ role }: { role: UserRole }) {
  const descriptions = {
    [UserRole.PARTICIPANT]: {
      text: "–ú–æ–∂–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å, –ø–æ–ª—É—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—á–∞—Å—Ç–∏—è",
      icon: User,
      color: "text-purple-600",
    },
    [UserRole.ORGANIZER]: {
      text: "–°–æ–∑–¥–∞—ë—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏, –º–æ–¥–µ—Ä–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
      icon: Calendar,
      color: "text-blue-600",
    },
    [UserRole.REVIEWER]: {
      text: "–†–µ—Ü–µ–Ω–∑–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
      icon: UserCheck,
      color: "text-green-600",
    },
    [UserRole.SUPER_ADMIN]: {
      text: "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏",
      icon: Users,
      color: "text-red-600",
    },
  };

  const config = descriptions[role];
  const Icon = config.icon;

  return (
    <div className={`flex items-start gap-2 text-xs ${config.color}`}>
      <Icon className="h-3 w-3 mt-0.5 flex-shrink-0" />
      <span>{config.text}</span>
    </div>
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–æ–ª–µ–π
function getRoleDisplayName(role: UserRole): string {
  const names = {
    [UserRole.PARTICIPANT]: "–£—á–∞—Å—Ç–Ω–∏–∫",
    [UserRole.ORGANIZER]: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
    [UserRole.REVIEWER]: "–†–µ—Ü–µ–Ω–∑–µ–Ω—Ç",
    [UserRole.SUPER_ADMIN]: "–°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
  };
  return names[role];
}
