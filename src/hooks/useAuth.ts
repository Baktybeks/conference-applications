// src/hooks/useAuth.ts - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ø—Ä–∞–≤

import { useState, useEffect, useCallback, useMemo } from "react";
import { appwriteService } from "@/services/appwriteService";
import { User, UserRole } from "@/types";
import { toast } from "react-toastify";
import { updateAuthCookie } from "@/utils/cookieSync";
import {
  canManageUsers,
  canManageConferences,
  canSubmitApplications,
  canViewAllData,
  canCreateConferences,
  canManageSystem,
  getAvailableActions,
  canAccessRoute,
  getHomeRoute,
} from "@/utils/permissions";

interface AuthState {
  user: User | null;
  loading: boolean;
  error: string | null;
}

interface AuthPermissions {
  canManageUsers: boolean;
  canManageConferences: boolean;
  canSubmitApplications: boolean;
  canViewAllData: boolean;
  canCreateConferences: boolean;
  canManageSystem: boolean;
  availableActions: string[];
}

export function useAuth() {
  const [state, setState] = useState<AuthState>({
    user: null,
    loading: true,
    error: null,
  });

  const [isLoggingOut, setIsLoggingOut] = useState(false);

  const clearError = useCallback(() => {
    setState((prev) => ({ ...prev, error: null }));
  }, []);

  const setError = useCallback((error: string) => {
    setState((prev) => ({ ...prev, error, loading: false }));
  }, []);

  const setUser = useCallback((user: User | null) => {
    console.log("üîê setUser –≤—ã–∑–≤–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", user);
    setState((prev) => ({ ...prev, user, loading: false, error: null }));

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º cookies –¥–ª—è middleware
    updateAuthCookie(user);
  }, []);

  const setLoading = useCallback((loading: boolean) => {
    setState((prev) => ({ ...prev, loading }));
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkCurrentUser = async () => {
      try {
        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
        setLoading(true);
        const currentUser = await appwriteService.getCurrentUser();

        if (currentUser) {
          console.log("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", currentUser);
          const userDoc = await appwriteService.getUserById(currentUser.$id);
          if (userDoc) {
            console.log("üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î:", userDoc);
            setUser(userDoc);
          } else {
            console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
            await appwriteService.logout();
            setUser(null);
          }
        } else {
          console.log("‚ùå –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
          setUser(null);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    checkCurrentUser();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
  const login = useCallback(
    async (email: string, password: string) => {
      try {
        console.log("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:", email);
        setLoading(true);
        clearError();

        console.log("üîë –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...");
        const session = await appwriteService.createSession(email, password);

        if (!session) {
          throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }
        console.log("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:", session);

        console.log("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
        const authUser = await appwriteService.getCurrentUser();

        if (!authUser) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:", authUser);

        console.log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ë–î...");
        const userDoc = await appwriteService.getUserById(authUser.$id);

        if (!userDoc) {
          console.log("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –≤—ã—Ö–æ–¥");
          await appwriteService.logout();
          throw new Error("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:", userDoc);

        if (!userDoc.isActive) {
          console.log("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –≤—ã—Ö–æ–¥");
          await appwriteService.logout();
          throw new Error("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
        }

        console.log(
          "üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –†–æ–ª—å:",
          userDoc.role,
          "–ê–∫—Ç–∏–≤–µ–Ω:",
          userDoc.isActive
        );
        setUser(userDoc);

        setTimeout(() => {
          console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 100–º—Å:", state.user);
        }, 100);

        return userDoc;
      } catch (error: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
        const message = error?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ";
        setError(message);
        throw new Error(message);
      } finally {
        setLoading(false);
      }
    },
    [clearError, setLoading, setError, setUser, state.user]
  );

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const register = useCallback(
    async (
      name: string,
      email: string,
      password: string,
      role: UserRole,
      organization?: string,
      phone?: string
    ) => {
      try {
        setLoading(true);
        clearError();

        const authUser = await appwriteService.createAccount(
          name,
          email,
          password
        );

        if (!authUser) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç");
        }

        const userData: Omit<User, "$id" | "$updatedAt"> = {
          name,
          email,
          role,
          isActive: role === UserRole.SUPER_ADMIN,
          organization: organization || "",
          position: "",
          bio: "",
          phone: phone || "",
          orcid: "",
          website: "",
          $createdAt: new Date().toISOString(),
        };

        const userDoc = await appwriteService.createUserDocument(
          authUser.$id,
          userData
        );

        if (role !== UserRole.SUPER_ADMIN) {
          await appwriteService.logout();
        }

        return userDoc;
      } catch (error: any) {
        const message = error?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
        setError(message);
        throw new Error(message);
      } finally {
        setLoading(false);
      }
    },
    [clearError, setLoading, setError]
  );

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = useCallback(async () => {
    try {
      setIsLoggingOut(true);
      await appwriteService.logout();
      setUser(null);
      toast.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
      setUser(null);
    } finally {
      setIsLoggingOut(false);
    }
  }, [setUser]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const updateProfile = useCallback(
    async (updates: Partial<User>) => {
      if (!state.user) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      }

      try {
        setLoading(true);

        const updatedUser = await appwriteService.updateUserDocument(
          state.user.$id,
          updates
        );

        if (updatedUser) {
          setUser(updatedUser);
          toast.success("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
          return updatedUser;
        } else {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
        }
      } catch (error: any) {
        const message = error?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è";
        setError(message);
        throw new Error(message);
      } finally {
        setLoading(false);
      }
    },
    [state.user, setLoading, setUser, setError]
  );

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const permissions = useMemo((): AuthPermissions => {
    if (!state.user) {
      return {
        canManageUsers: false,
        canManageConferences: false,
        canSubmitApplications: false,
        canViewAllData: false,
        canCreateConferences: false,
        canManageSystem: false,
        availableActions: [],
      };
    }

    return {
      canManageUsers: canManageUsers(state.user.role),
      canManageConferences: canManageConferences(state.user.role),
      canSubmitApplications: canSubmitApplications(state.user.role),
      canViewAllData: canViewAllData(state.user.role),
      canCreateConferences: canCreateConferences(state.user.role),
      canManageSystem: canManageSystem(state.user.role),
      availableActions: getAvailableActions(state.user.role),
    };
  }, [state.user]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ä—à—Ä—É—Ç—É
  const checkRouteAccess = useCallback(
    (route: string): boolean => {
      if (!state.user) return false;
      return canAccessRoute(state.user.role, route);
    },
    [state.user]
  );

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  const getHomePath = useCallback((): string => {
    if (!state.user) return "/login";
    return getHomeRoute(state.user.role);
  }, [state.user]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  const hasPermission = useCallback(
    (action: string): boolean => {
      return permissions.availableActions.includes(action);
    },
    [permissions.availableActions]
  );

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
  const hasRole = useCallback(
    (role: UserRole | UserRole[]): boolean => {
      if (!state.user) return false;

      if (Array.isArray(role)) {
        return role.includes(state.user.role);
      }

      return state.user.role === role;
    },
    [state.user]
  );

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏
  const hasMinimumRole = useCallback(
    (minimumRole: UserRole): boolean => {
      if (!state.user) return false;

      const rolePriorities = {
        [UserRole.PARTICIPANT]: 1,
        [UserRole.ORGANIZER]: 2,
        [UserRole.SUPER_ADMIN]: 3,
      };

      return rolePriorities[state.user.role] >= rolePriorities[minimumRole];
    },
    [state.user]
  );

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ useAuth –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:", {
      user: state.user,
      loading: state.loading,
      error: state.error,
      isAuthenticated: !!state.user,
      userRole: state.user?.role,
      userActive: state.user?.isActive,
      permissions,
    });
  }, [state, permissions]);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user: state.user,
    loading: state.loading,
    error: state.error,
    isLoggingOut,

    // –§—É–Ω–∫—Ü–∏–∏
    register,
    login,
    logout,
    updateProfile,
    clearError,

    // –£—Ç–∏–ª–∏—Ç—ã
    isAuthenticated: !!state.user,
    isLoading: state.loading,

    // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
    ...permissions,

    // –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checkRouteAccess,
    getHomePath,
    hasPermission,
    hasRole,
    hasMinimumRole,

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    canManageUsers: permissions.canManageUsers,
    canManageRequests: permissions.canManageConferences, // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    canCreateRequests: permissions.canSubmitApplications, // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  };
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
export function usePermissions(requiredPermissions: string | string[]) {
  const { hasPermission, user, loading } = useAuth();

  const permissions = useMemo(() => {
    if (loading || !user) {
      return {
        loading,
        hasAccess: false,
        missingPermissions: Array.isArray(requiredPermissions)
          ? requiredPermissions
          : [requiredPermissions],
      };
    }

    const permissionsArray = Array.isArray(requiredPermissions)
      ? requiredPermissions
      : [requiredPermissions];
    const missingPermissions = permissionsArray.filter(
      (permission) => !hasPermission(permission)
    );

    return {
      loading: false,
      hasAccess: missingPermissions.length === 0,
      missingPermissions,
    };
  }, [hasPermission, user, loading, requiredPermissions]);

  return permissions;
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
export function useRoleCheck(requiredRoles: UserRole | UserRole[]) {
  const { hasRole, user, loading } = useAuth();

  const roleCheck = useMemo(() => {
    if (loading || !user) {
      return {
        loading,
        hasAccess: false,
        userRole: null,
        requiredRoles: Array.isArray(requiredRoles)
          ? requiredRoles
          : [requiredRoles],
      };
    }

    return {
      loading: false,
      hasAccess: hasRole(requiredRoles),
      userRole: user.role,
      requiredRoles: Array.isArray(requiredRoles)
        ? requiredRoles
        : [requiredRoles],
    };
  }, [hasRole, user, loading, requiredRoles]);

  return roleCheck;
}
