// src/middleware.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú

import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { UserRole } from "@/types";

export function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  console.log(`üõ°Ô∏è Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ ${path}`);

  // –ü–æ–ª—É—á–∞–µ–º auth cookie
  const authSession = request.cookies.get("auth-storage");
  console.log("üç™ Auth cookie –Ω–∞–π–¥–µ–Ω:", !!authSession);

  let user = null;

  if (authSession) {
    try {
      const parsed = JSON.parse(authSession.value);
      user = parsed.state?.user;
      console.log(
        "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ cookie:",
        user
          ? {
              id: user.$id,
              email: user.email,
              role: user.role,
              isActive: user.isActive,
            }
          : null
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ auth-session:", error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const isAuthenticated = !!user && user.$id && user.email && user.role;
  const isActive = user?.isActive === true;

  console.log("üîç –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", {
    isAuthenticated,
    isActive,
    userRole: user?.role,
    path,
  });

  // –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
  if (path.startsWith("/login") || path.startsWith("/register")) {
    if (isAuthenticated && isActive) {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
      return redirectByRole(user.role, request);
    }
    console.log("üìÑ –î–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–∞–∑—Ä–µ—à–µ–Ω");
    return NextResponse.next();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (!isAuthenticated || !isActive) {
    console.log("üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login");
    const loginUrl = new URL("/login", request.url);
    return NextResponse.redirect(loginUrl);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
  if (path.startsWith("/admin")) {
    if (user.role !== UserRole.SUPER_ADMIN) {
      console.log("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /admin, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
      return redirectByRole(user.role, request);
    }
    console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ /admin —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è SUPER_ADMIN");
  }

  if (path.startsWith("/organizer")) {
    if (![UserRole.SUPER_ADMIN, UserRole.ORGANIZER].includes(user.role)) {
      console.log(
        "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /organizer, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏"
      );
      return redirectByRole(user.role, request);
    }
    console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ /organizer —Ä–∞–∑—Ä–µ—à–µ–Ω");
  }

  if (path.startsWith("/participant")) {
    if (![UserRole.SUPER_ADMIN, UserRole.PARTICIPANT].includes(user.role)) {
      console.log(
        "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /participant, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏"
      );
      return redirectByRole(user.role, request);
    }
    console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ /participant —Ä–∞–∑—Ä–µ—à–µ–Ω");
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (path === "/") {
    console.log("üè† –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —Ä–æ–ª–∏");
    return redirectByRole(user.role, request);
  }

  console.log("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
  return NextResponse.next();
}

function redirectByRole(role: UserRole, request: NextRequest) {
  let targetPath: string;

  switch (role) {
    case UserRole.SUPER_ADMIN:
      targetPath = "/admin";
      console.log("üëë –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SUPER_ADMIN –Ω–∞ /admin");
      break;
    case UserRole.ORGANIZER:
      targetPath = "/organizer";
      console.log("üìã –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ORGANIZER –Ω–∞ /organizer");
      break;
    case UserRole.PARTICIPANT:
      targetPath = "/participant";
      console.log("üéì –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PARTICIPANT –Ω–∞ /participant");
      break;
    default:
      targetPath = "/login";
      console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login");
  }

  const url = new URL(targetPath, request.url);
  console.log(
    `üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç: ${request.nextUrl.pathname} ‚Üí ${targetPath}`
  );
  return NextResponse.redirect(url);
}

export const config = {
  matcher: [
    "/((?!api|_next/static|_next/image|public|favicon.ico).*)",
    "/admin/:path*",
    "/organizer/:path*",
    "/reviewer/:path*",
    "/participant/:path*",
    "/login",
    "/register",
    "/",
  ],
};
